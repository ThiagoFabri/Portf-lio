import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Carregar os dados (substitua pelo caminho correto do dataset)
df = pd.read_csv('Data/ifood_df.csv')  # Atualize com o nome correto do arquivo

# Configurar a pÃ¡gina
st.set_page_config(page_title='Dashboard de Marketing', layout='wide')
st.title('ðŸ“Š Dashboard de AnÃ¡lise de Clientes')

# IntroduÃ§Ã£o
st.write("""
    ## SegmentaÃ§Ã£o de Clientes para EstratÃ©gias de Marketing e Vendas

    O objetivo deste trabalho Ã© realizar uma segmentaÃ§Ã£o de clientes de uma plataforma de delivery (como o iFood) com base em caracterÃ­sticas demogrÃ¡ficas, comportamentais e de compra. A segmentaÃ§Ã£o ajuda a personalizar as estratÃ©gias de marketing, aumentar a eficÃ¡cia das campanhas e otimizar os investimentos em aÃ§Ãµes direcionadas.

    ### Motivos para a SegmentaÃ§Ã£o:
    - **PersonalizaÃ§Ã£o das campanhas de marketing**
    - **Melhora na alocaÃ§Ã£o de recursos**
    - **Aprimoramento da fidelizaÃ§Ã£o**
    - **IdentificaÃ§Ã£o de novos segmentos de mercado**

    As variÃ¡veis utilizadas nesta segmentaÃ§Ã£o incluem dados de compras, preferÃªncias e informaÃ§Ãµes demogrÃ¡ficas.
""")

# ApresentaÃ§Ã£o dos Dados
st.write("""
    ### VisÃ£o Geral dos Dados
    Abaixo, apresentamos algumas estatÃ­sticas gerais dos clientes filtrados pela faixa de renda selecionada.
""")

# Filtros para faixa de renda
st.sidebar.header('Filtros')
income_range = st.sidebar.slider('Faixa de Renda', int(df['Income'].min()), int(df['Income'].max()),
                                 (int(df['Income'].min()), int(df['Income'].max())))
df_filtered = df[(df['Income'] >= income_range[0]) & (df['Income'] <= income_range[1])]

# EstatÃ­sticas descritivas
st.dataframe(df_filtered.describe())

# ExplicaÃ§Ã£o das Colunas
st.write("""
    ### ExplicaÃ§Ã£o das Colunas:
    - **Income**: A renda anual do cliente.
    - **Kidhome**: Quantidade de filhos pequenos (menores de 18 anos) que o cliente tem.
    - **Teenhome**: Quantidade de filhos adolescentes (entre 13 e 18 anos) que o cliente tem.
    - **Recency**: NÃºmero de dias desde a Ãºltima compra do cliente na plataforma.
    - **MntWines**: Gastos do cliente com vinhos.
    - **MntFruits**: Gastos do cliente com frutas.
    - **MntMeatProducts**: Gastos do cliente com produtos de carne.
    - **MntFishProducts**: Gastos do cliente com produtos de peixe.
    - **MntSweetProducts**: Gastos do cliente com produtos doces.
    - **MntGoldProds**: Gastos do cliente com produtos de ouro.
    - **NumDealsPurchases**: NÃºmero de compras realizadas com desconto.
    - **NumWebPurchases**: NÃºmero de compras realizadas pelo site.
    - **NumCatalogPurchases**: NÃºmero de compras realizadas por catÃ¡logo.
    - **NumStorePurchases**: NÃºmero de compras realizadas na loja fÃ­sica.
    - **NumWebVisitsMonth**: NÃºmero de visitas ao site por mÃªs.
    - **AcceptedCmp1**: Indicador binÃ¡rio de aceitaÃ§Ã£o da campanha 1.
    - **AcceptedCmp2**: Indicador binÃ¡rio de aceitaÃ§Ã£o da campanha 2.
    - **AcceptedCmp3**: Indicador binÃ¡rio de aceitaÃ§Ã£o da campanha 3.
    - **AcceptedCmp4**: Indicador binÃ¡rio de aceitaÃ§Ã£o da campanha 4.
    - **AcceptedCmp5**: Indicador binÃ¡rio de aceitaÃ§Ã£o da campanha 5.
    - **Complain**: Se o cliente fez uma reclamaÃ§Ã£o (0 ou 1).
    - **Z_CostContact**: Custo de contato com o cliente.
    - **Z_Revenue**: Receita gerada pelo cliente.
    - **Response**: Se o cliente respondeu Ã  campanha de marketing (0 ou 1).
    - **Age**: Idade do cliente.
    - **Customer_Days**: NÃºmero de dias desde que o cliente se registrou na plataforma.
    - **marital_Divorced**: Se o cliente Ã© divorciado (0 ou 1).
    - **marital_Married**: Se o cliente Ã© casado (0 ou 1).
    - **marital_Single**: Se o cliente Ã© solteiro (0 ou 1).
    - **marital_Together**: Se o cliente estÃ¡ em um relacionamento (0 ou 1).
    - **marital_Widow**: Se o cliente Ã© viÃºvo (0 ou 1).
    - **education_2n Cycle**: Se o cliente tem o ensino secundÃ¡rio (0 ou 1).
    - **education_Basic**: Se o cliente tem ensino fundamental (0 ou 1).
    - **education_Graduation**: Se o cliente tem graduaÃ§Ã£o (0 ou 1).
    - **education_Master**: Se o cliente tem mestrado (0 ou 1).
    - **education_PhD**: Se o cliente tem doutorado (0 ou 1).
    - **MntTotal**: Total gasto em todas as categorias de produtos.
    - **MntRegularProds**: Total gasto em produtos regulares (nÃ£o promocionais).
    - **AcceptedCmpOverall**: NÃºmero total de campanhas de marketing aceitas pelo cliente.
""")


# GrÃ¡fico de DistribuiÃ§Ã£o de Gastos
st.write('### DistribuiÃ§Ã£o dos Gastos por Categoria')
categories = ['MntFishProducts', 'MntMeatProducts', 'MntFruits', 'MntSweetProducts', 'MntWines', 'MntGoldProds']
df_melted = df_filtered.melt(id_vars=['Income'], value_vars=categories, var_name='Categoria', value_name='Gasto')

fig, ax = plt.subplots(figsize=(10, 5))
sns.boxplot(data=df_melted, x='Categoria', y='Gasto', ax=ax)
ax.set_xticklabels(ax.get_xticklabels(), rotation=45)
st.pyplot(fig)

# VerificaÃ§Ã£o da existÃªncia de campanhas antes de gerar grÃ¡fico
if any(campaign in df.columns for campaign in
       ['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5']):
    st.write('### Taxa de AceitaÃ§Ã£o das Campanhas')
    campaigns = ['AcceptedCmp1', 'AcceptedCmp2', 'AcceptedCmp3', 'AcceptedCmp4', 'AcceptedCmp5', 'Response']
    campaign_counts = df_filtered[campaigns].sum()

    fig, ax = plt.subplots(figsize=(10, 5))
    sns.barplot(x=campaign_counts.index, y=campaign_counts.values, ax=ax)
    ax.set_ylabel('NÃºmero de Aceites')
    st.pyplot(fig)
else:
    st.write('### NÃ£o hÃ¡ dados de campanhas para exibir')

# ComparaÃ§Ã£o de Compras: Online vs. Loja
st.write('### ComparaÃ§Ã£o de Compras: Online vs. Loja FÃ­sica')
df_filtered['Total_Online'] = df_filtered['NumWebPurchases'] + df_filtered['NumCatalogPurchases']
df_filtered['Total_Loja'] = df_filtered['NumStorePurchases']
st.bar_chart(df_filtered[['Total_Online', 'Total_Loja']].sum())

st.write('Dashboard atualizado! ðŸŽ¯')

